# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'process.ui'
#
# Created by: PyQt5 UI code generator 5.11.3
#
# WARNING! All changes made in this file will be lost!
#
# Subscribe to PyShine Youtube channel for more detail!
#Trainning dataset every picture as the same as position
from tensorflow.keras.models import load_model
import serial
from datetime import datetime
import os
import argparse

import matplotlib.pyplot as plt
import cvlib as _cvlib
from cvlib.object_detection import draw_bbox

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage

import cv2, imutils
import time
import numpy as np
import pyshine as ps
import serial

sizeTarget = (224, 224)
np.set_printoptions(suppress=True)
dataObj = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
model = load_model("D:/Test Object-Classification - GUI/keras_model.h5")  # path model

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(498*2, 560)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")

        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("images/H.png"))
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)

        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")

        self.verticalSlider = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.gridLayout.addWidget(self.verticalSlider, 0, 0, 1, 1)

        self.verticalSlider_2 = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider_2.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_2.setObjectName("verticalSlider_2")
        self.gridLayout.addWidget(self.verticalSlider_2, 0, 1, 1, 1)

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 1, 1, 1)

        self.horizontalLayout.addLayout(self.gridLayout)
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        """
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.gridLayout_2.addLayout(self.horizontalLayout_2, 1, 0, 1, 1)

        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        """
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 510, 75, 23))
        self.pushButton.setObjectName("Take picture")
        #self.pushButton.setStyleSheet("background-color: red")

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(120, 510, 75, 23))
        self.pushButton_2.setObjectName("Start")
        self.pushButton_2.setStyleSheet("background-color: red")

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(210, 510, 75, 23))
        self.pushButton_3.setObjectName("Turn on")
        self.pushButton_3.setStyleSheet("background-color: red")
        """
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(300, 510, 75, 23))
        self.pushButton_4.setObjectName("Turn off")
        self.pushButton_4.setStyleSheet("background-color: red")
        """
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setObjectName(u"progressBar")
        self.progressBar.setGeometry(QtCore.QRect(690, 10, 71, 511))
        self.progressBar.setValue(0)
        #self.progressBar.setStyleSheet("QProgressBar::chunk ""{""background-color: red;""}")
        self.progressBar.setOrientation(QtCore.Qt.Vertical)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1069, 21))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)

        spacerItem = QtWidgets.QSpacerItem(313, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem, 1, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.verticalSlider.valueChanged['int'].connect(self.brightness_value)
        self.verticalSlider_2.valueChanged['int'].connect(self.blur_value)
        self.pushButton_3.clicked.connect(self.end_event)
        self.pushButton_2.clicked.connect(self.loadImage)
        self.pushButton.clicked.connect(self.savePhoto)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Added code here
        self.filename = 'Snapshot ' + str(
            time.strftime("%Y-%b-%d at %H.%M.%S %p")) + '.png'  # Will hold the image address location
        self.tmp = None  # Will hold the temporary image for display
        self.brightness_value_now = 0  # Updated brightness value
        self.blur_value_now = 0  # Updated blur value
        self.fps = 0
        self.started = False
        self.started1 = False
    def end_event(self):

        if self.started1:
            self.started1 = False
            print("test")
            s = light_control("COM8", 38400, 1)
            s.open()
            s.enable()
            s.close()
            self.pushButton_3.setText('Light')
            self.pushButton_3.setStyleSheet("background-color: green")
        else:
            self.started1 = True
            print("test2")
            s = light_control("COM8", 38400, 1)
            s.open()
            s.disable()
            s.close()
            self.pushButton_3.setText('Dark')
            self.pushButton_3.setStyleSheet("background-color: red")

    def loadImage(self):
        """ This function will load the camera device, obtain the image
            and set it to label using the setPhoto function
        """
        if self.started:
            self.started = False
            self.pushButton_2.setText('STOP')
            self.pushButton_2.setStyleSheet("background-color: red")
        else:
            self.started = True
            self.pushButton_2.setText('START')
            self.pushButton_2.setStyleSheet("background-color: green")

        vid = cv2.VideoCapture(0)
        cnt = 0
        frames_to_count = 20
        st = 0
        fps = 0
        cnt_step = 0
        self.progressBar.setValue(0)
        self.step = 0
        while (vid.isOpened()):
            img, self.image = vid.read()
            cv2.imshow("RAW", self.image)
            print("[INFO] w: {}, h: {}".format(self.image.shape[1], self.image.shape[0]))

            self.image = imutils.resize(self.image, height=480)

            if cnt == frames_to_count:
                try:  # To avoid divide by 0 we put it in try except
                    #print(frames_to_count / (time.time() - st), 'FPS')
                    self.fps = round(frames_to_count / (time.time() - st))
                    st = time.time()
                    cnt = 0
                except:
                    pass

            cnt += 1

            self.setting=95
            self.modelResult, self.predictionResult = self.update(self.setting, self.step)
            if self.predictionResult > self.setting:
               cnt_step +=1

            if cnt_step > 20 and self.step == 0 and self.modelResult == 20:
             self.progressBar.setValue(25)
             self.step = 1
            elif cnt_step > 40 and self.step == 1 and self.modelResult == 20:
             self.progressBar.setValue(50)
             self.step = 2
            elif cnt_step > 60 and self.step == 2 and self.modelResult == 20:
             self.progressBar.setValue(75)
             self.step = 3
            elif cnt_step > 80 and self.step == 3 and self.modelResult == 20:
             self.progressBar.setValue(100)
             self.step = 4
            elif cnt_step > 100 and self.step == 4 and self.modelResult == 20:
             cnt_step = 0
             self.progressBar.setValue(0)
             self.step = 0

            key = cv2.waitKey(1) & 0xFF
            if self.started == False:

                break
                print('Loop break')

    def setPhoto(self, image):
        """ This function will take image input and resize it
            only for display purpose and convert it to QImage
            to set at the label.
        """
        self.tmp = image
        image = imutils.resize(image, width=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)

        self.label.setPixmap(QtGui.QPixmap.fromImage(image))

    def brightness_value(self, value):
        """ This function will take value from the slider
            for the brightness from 0 to 99
        """
        self.brightness_value_now = value
        #print('Brightness: ', value)
        self.update(self.setting,self.step)

    def blur_value(self, value):
        """ This function will take value from the slider
            for the blur from 0 to 99 """
        self.blur_value_now = value
        #print('Blur: ', value)
        self.update(self.setting,self.step)

    def changeBrightness(self, img, value):
        """ This function will take an image (img) and the brightness
            value. It will perform the brightness change using OpenCv
            and after split, will merge the img and return it.
        """
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)
        lim = 255 - value
        v[v > lim] = 255
        v[v <= lim] += value
        final_hsv = cv2.merge((h, s, v))
        img = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
        return img

    def changeBlur(self, img, value):
        """ This function will take the img image and blur values as inputs.
            After perform blur operation using opencv function, it returns
            the image img.
        """
        kernel_size = (value + 1, value + 1)  # +1 is to avoid 0
        img = cv2.blur(img, kernel_size)
        return img

    def update(self,setting,step):
        """ This function will update the photo according to the
            current values of blur and brightness and set it to photo label.
        """
        img = self.changeBrightness(self.image, self.brightness_value_now)
        img = self.changeBlur(img, self.blur_value_now)
        if img is not None:
            img_resize = cv2.resize(img, sizeTarget)  # resize image
            image_array = np.asarray(img_resize)  # convert image to array
            normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1  # normalized image

            dataObj[0] = normalized_image_array  # get frist dimention
            prediction = list(model.predict(dataObj)[0])  # change np.ndarray to list
            idx = prediction.index(max(prediction))  # get index is maximun value
            dd = str(round(prediction[idx] * 100, 2)) + "%\r\n"
            #ser2.write(dd.encode('utf-8'))
            self.x = prediction[idx] * 100
            if self.x > 95:
                text4 = "STEP" + str(self.step) + " OK"
                self.textColor4 = (20, 210, 4)
                self.ret = "OK"
                self.progressBar.setStyleSheet("QProgressBar::chunk ""{""background-color: green;""}")

                if idx == 0:
                    text1 = "MT2: "  + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 1:
                    text1 = "BT1: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 2:
                    text1 = "R248: "  + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 3:
                    text1 = "SW: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 4:
                    text1 = "P2: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 5:
                    text1 = "P4: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 6:
                    text1 ="R128: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 7:
                    text1 = "J2: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 8:
                    text1 = "J4: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 9:
                    text1 = "L9: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 10:
                    text1 = "C200: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 11:
                    text1 = "L1: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 12:
                    text1 = "C201: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 13:
                    text1 = "U4: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 14:
                    text1 = "MT1: "  + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 15:
                    text1 = "J5: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 16:
                    text1 = "Q10: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 17:
                    text1 = "Y3: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 18:
                    text1 = "D20: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 19:
                    text1 = "U19: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 20:
                    text1 = "Q22: " + str(round(prediction[idx] * 100, 2)) + " % "
                elif idx == 21:
                    text1 = "Q23: " + str(round(prediction[idx] * 100, 2)) + " % "
            else:
                text1 = ": " + str(round(prediction[idx] * 100, 2)) + "%"
                text4 = "STEP" + str(self.step) + " NG"
                self.ret = "NG"
                self.textColor4 = (210, 20, 0)
                self.progressBar.setStyleSheet("QProgressBar::chunk ""{""background-color: red;""}")

        # Here we add display text to the image
        text = 'FPS: ' + str(self.fps)
        img = ps.putBText(img, text, text_offset_x=20, text_offset_y=30, vspace=20, hspace=10, font_scale=1.0,
                          background_RGB=(10, 20, 222), text_RGB=(255, 255, 255))
        #
        img = ps.putBText(img, text1, text_offset_x=self.image.shape[1] - 240, text_offset_y=30, vspace=20,
                          hspace=10, font_scale=1.0, background_RGB=(228, 20, 222), text_RGB=(255, 255, 255))
        text = f"Brightness: {self.brightness_value_now}"
        img = ps.putBText(img, text, text_offset_x=40, text_offset_y=425, vspace=20, hspace=10, font_scale=1.0,
                          background_RGB=(200, 200, 4), text_RGB=(255, 255, 255))
        text = f'Blur: {self.blur_value_now}: '
        img = ps.putBText(img, text, text_offset_x=self.image.shape[1] - 200, text_offset_y=425, vspace=20, hspace=10,
                          font_scale=1.0, background_RGB=(210, 255, 4), text_RGB=(255, 255, 255))
        #Step
        img = ps.putBText(img, text4, text_offset_x=self.image.shape[1] -500 , text_offset_y=200, vspace=20, hspace=10,
                          font_scale=3.0, background_RGB=self.textColor4, text_RGB=(255, 255, 255))
        self.setPhoto(img)
        return idx,self.x

    def savePhoto(self):
        """ This function will save the image"""
        self.filename = 'Snapshot ' + str(time.strftime("%Y-%b-%d at %H.%M.%S %p")) + '.png'
        cv2.imwrite(self.filename, self.tmp)
        print('Image saved as:', self.filename)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MINI AOI"))
        #self.pushButton_4.setText(_translate("MainWindow", "Turn on"))
        self.pushButton_3.setText(_translate("MainWindow", "Dark"))
        self.pushButton_2.setText(_translate("MainWindow", "Start"))
        self.label_2.setText(_translate("MainWindow", "Brightness"))
        self.label_3.setText(_translate("MainWindow", "Blur"))
        self.pushButton.setText(_translate("MainWindow", "Take picture"))


# Subscribe to PyShine Youtube channel for more detail!

# WEBSITE: www.pyshine.com

class light_control(object):
    def __init__(self, comport, baudrate, timeout):
        self.comport = comport
        self.baudrate = baudrate
        self.timeout = timeout
        self.s = serial.Serial(comport, baudrate, timeout=timeout)

    def enable(self):
        if self.s.is_open:
            self.s.write("@00F23800E3\r\n".encode())
            i = self.s.readlines()
            print("Message from LED LIGHT CONTROLLER: ")
            print(i)
            if i == "":
                i = self.s.readlines()
            else:
                self.s.write("@00L11D\r\n".encode())
                _ = self.s.readlines()

    def disable(self):
        if self.s.is_open:
            self.s.write("@00F00000D6\r\n".encode())
            i = self.s.readlines()
            print("Message from LED LIGHT CONTROLLER: ")
            print(i)
            if i == "":
                i = self.s.readlines()
            else:
                self.s.write("@00L11D\r\n".encode())
                _ = self.s.readlines()
            # print(_)

    def open(self):
        if not self.s.is_open:
            self.s.open()

    def close(self):
            self.s.close()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
